{"ast":null,"code":"import moment from \"moment\";\nexport const formatMomentDate = date => {\n  return moment(date).format(\"MM-DD-YYYY\");\n};\nexport const formatMomentTime = time => {\n  // Assuming time is in HH:mm:ss format\n  return moment(time, \"HH:mm\").format(\"hh:mm A\");\n};\nexport const isDateBefore = (date1, date2) => {\n  // Parse the dates using moment\n  const momentDate1 = moment(date1, \"MM-DD-YYYY\");\n  const momentDate2 = moment(date2, \"MM-DD-YYYY\");\n\n  // Check if date1 is before date2\n  return momentDate1.isBefore(momentDate2);\n};\nexport const isDateAfter = (date1, date2) => {\n  // Parse the dates using moment\n  const momentDate1 = moment(date1, \"MM-DD-YYYY\");\n  const momentDate2 = moment(date2, \"MM-DD-YYYY\");\n\n  // Check if date1 is after date2\n  return momentDate1.isAfter(momentDate2);\n};\nexport const isTimeBefore = (time1, time2) => {\n  // Parse the times using moment\n  const momentTime1 = moment(time1, \"HH:mm\");\n  const momentTime2 = moment(time2, \"HH:mm\");\n\n  // Check if time1 is before time2\n  return momentTime1.isBefore(momentTime2);\n};\nexport const isTimeAfter = (time1, time2) => {\n  // Parse the times using moment\n  const momentTime1 = moment(time1, \"HH:mm\");\n  const momentTime2 = moment(time2, \"HH:mm\");\n\n  // Check if time1 is after time2\n  return momentTime1.isAfter(momentTime2);\n};","map":{"version":3,"names":["moment","formatMomentDate","date","format","formatMomentTime","time","isDateBefore","date1","date2","momentDate1","momentDate2","isBefore","isDateAfter","isAfter","isTimeBefore","time1","time2","momentTime1","momentTime2","isTimeAfter"],"sources":["/Users/boss/Downloads/fund-raising-updated/fund-raising-ui/src/utils/momentUtil.js"],"sourcesContent":["import moment from \"moment\";\n\nexport const formatMomentDate = (date) => {\n  return moment(date).format(\"MM-DD-YYYY\");\n};\n\nexport const formatMomentTime = (time) => {\n  // Assuming time is in HH:mm:ss format\n  return moment(time, \"HH:mm\").format(\"hh:mm A\");\n};\n\nexport const isDateBefore = (date1, date2) => {\n  // Parse the dates using moment\n  const momentDate1 = moment(date1, \"MM-DD-YYYY\");\n  const momentDate2 = moment(date2, \"MM-DD-YYYY\");\n\n  // Check if date1 is before date2\n  return momentDate1.isBefore(momentDate2);\n};\n\nexport const isDateAfter = (date1, date2) => {\n  // Parse the dates using moment\n  const momentDate1 = moment(date1, \"MM-DD-YYYY\");\n  const momentDate2 = moment(date2, \"MM-DD-YYYY\");\n\n  // Check if date1 is after date2\n  return momentDate1.isAfter(momentDate2);\n};\n\nexport const isTimeBefore = (time1, time2) => {\n  // Parse the times using moment\n  const momentTime1 = moment(time1, \"HH:mm\");\n  const momentTime2 = moment(time2, \"HH:mm\");\n\n  // Check if time1 is before time2\n  return momentTime1.isBefore(momentTime2);\n};\n\nexport const isTimeAfter = (time1, time2) => {\n  // Parse the times using moment\n  const momentTime1 = moment(time1, \"HH:mm\");\n  const momentTime2 = moment(time2, \"HH:mm\");\n\n  // Check if time1 is after time2\n  return momentTime1.isAfter(momentTime2);\n};\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,OAAO,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;EACxC,OAAOF,MAAM,CAACE,IAAI,CAAC,CAACC,MAAM,CAAC,YAAY,CAAC;AAC1C,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;EACxC;EACA,OAAOL,MAAM,CAACK,IAAI,EAAE,OAAO,CAAC,CAACF,MAAM,CAAC,SAAS,CAAC;AAChD,CAAC;AAED,OAAO,MAAMG,YAAY,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EAC5C;EACA,MAAMC,WAAW,GAAGT,MAAM,CAACO,KAAK,EAAE,YAAY,CAAC;EAC/C,MAAMG,WAAW,GAAGV,MAAM,CAACQ,KAAK,EAAE,YAAY,CAAC;;EAE/C;EACA,OAAOC,WAAW,CAACE,QAAQ,CAACD,WAAW,CAAC;AAC1C,CAAC;AAED,OAAO,MAAME,WAAW,GAAGA,CAACL,KAAK,EAAEC,KAAK,KAAK;EAC3C;EACA,MAAMC,WAAW,GAAGT,MAAM,CAACO,KAAK,EAAE,YAAY,CAAC;EAC/C,MAAMG,WAAW,GAAGV,MAAM,CAACQ,KAAK,EAAE,YAAY,CAAC;;EAE/C;EACA,OAAOC,WAAW,CAACI,OAAO,CAACH,WAAW,CAAC;AACzC,CAAC;AAED,OAAO,MAAMI,YAAY,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EAC5C;EACA,MAAMC,WAAW,GAAGjB,MAAM,CAACe,KAAK,EAAE,OAAO,CAAC;EAC1C,MAAMG,WAAW,GAAGlB,MAAM,CAACgB,KAAK,EAAE,OAAO,CAAC;;EAE1C;EACA,OAAOC,WAAW,CAACN,QAAQ,CAACO,WAAW,CAAC;AAC1C,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGA,CAACJ,KAAK,EAAEC,KAAK,KAAK;EAC3C;EACA,MAAMC,WAAW,GAAGjB,MAAM,CAACe,KAAK,EAAE,OAAO,CAAC;EAC1C,MAAMG,WAAW,GAAGlB,MAAM,CAACgB,KAAK,EAAE,OAAO,CAAC;;EAE1C;EACA,OAAOC,WAAW,CAACJ,OAAO,CAACK,WAAW,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}